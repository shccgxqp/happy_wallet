// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: e_group.sql

package db

import (
	"context"
)

const deleteEGroup = `-- name: DeleteEGroup :exec
DELETE FROM e_group WHERE id = $1
`

func (q *Queries) DeleteEGroup(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteEGroup, id)
	return err
}

const getEGroup = `-- name: GetEGroup :one
SELECT id, code, name, currency, created_at, updated_at FROM e_group
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEGroup(ctx context.Context, id int64) (EGroup, error) {
	row := q.db.QueryRowContext(ctx, getEGroup, id)
	var i EGroup
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEGroup = `-- name: ListEGroup :many
SELECT id, code, name, currency, created_at, updated_at FROM e_group
ORDER BY id
LIMIT $1 
OFFSET $2
`

type ListEGroupParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEGroup(ctx context.Context, arg ListEGroupParams) ([]EGroup, error) {
	rows, err := q.db.QueryContext(ctx, listEGroup, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []EGroup{}
	for rows.Next() {
		var i EGroup
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Name,
			&i.Currency,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const queryEGroup = `-- name: QueryEGroup :one
INSERT INTO e_group (
code, 
name, 
currency 
) VALUES (
  $1, $2, $3
) RETURNING id, code, name, currency, created_at, updated_at
`

type QueryEGroupParams struct {
	Code     string `json:"code"`
	Name     string `json:"name"`
	Currency string `json:"currency"`
}

func (q *Queries) QueryEGroup(ctx context.Context, arg QueryEGroupParams) (EGroup, error) {
	row := q.db.QueryRowContext(ctx, queryEGroup, arg.Code, arg.Name, arg.Currency)
	var i EGroup
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateEGroup = `-- name: UpdateEGroup :one
UPDATE e_group
  set name = $2,
  currency = $3
WHERE code = $1
RETURNING id, code, name, currency, created_at, updated_at
`

type UpdateEGroupParams struct {
	Code     string `json:"code"`
	Name     string `json:"name"`
	Currency string `json:"currency"`
}

func (q *Queries) UpdateEGroup(ctx context.Context, arg UpdateEGroupParams) (EGroup, error) {
	row := q.db.QueryRowContext(ctx, updateEGroup, arg.Code, arg.Name, arg.Currency)
	var i EGroup
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Name,
		&i.Currency,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
