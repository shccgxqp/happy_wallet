// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: team.sql

package db

import (
	"context"
)

const createTeam = `-- name: CreateTeam :one
INSERT INTO teams (
owner,
team_name, 
currency,
team_members
) VALUES (
  $1, $2, $3, $4
) RETURNING id, owner, team_name, currency, team_members, created_at, updated_at
`

type CreateTeamParams struct {
	Owner       int64  `json:"owner"`
	TeamName    string `json:"team_name"`
	Currency    string `json:"currency"`
	TeamMembers []byte `json:"team_members"`
}

func (q *Queries) CreateTeam(ctx context.Context, arg CreateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, createTeam,
		arg.Owner,
		arg.TeamName,
		arg.Currency,
		arg.TeamMembers,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.TeamName,
		&i.Currency,
		&i.TeamMembers,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTeam = `-- name: DeleteTeam :exec
DELETE FROM teams WHERE id = $1
`

func (q *Queries) DeleteTeam(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteTeam, id)
	return err
}

const getTeam = `-- name: GetTeam :one
SELECT id, owner, team_name, currency, team_members, created_at, updated_at FROM teams
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetTeam(ctx context.Context, id int64) (Team, error) {
	row := q.db.QueryRow(ctx, getTeam, id)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.TeamName,
		&i.Currency,
		&i.TeamMembers,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTeams = `-- name: ListTeams :many
SELECT id, owner, team_name, currency, team_members, created_at, updated_at FROM teams
ORDER BY id
LIMIT $1 
OFFSET $2
`

type ListTeamsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListTeams(ctx context.Context, arg ListTeamsParams) ([]Team, error) {
	rows, err := q.db.Query(ctx, listTeams, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Team{}
	for rows.Next() {
		var i Team
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.TeamName,
			&i.Currency,
			&i.TeamMembers,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTeam = `-- name: UpdateTeam :one
UPDATE teams
  set team_name = $2,
  currency = $3,
  team_members = $4
WHERE id = $1
RETURNING id, owner, team_name, currency, team_members, created_at, updated_at
`

type UpdateTeamParams struct {
	ID          int64  `json:"id"`
	TeamName    string `json:"team_name"`
	Currency    string `json:"currency"`
	TeamMembers []byte `json:"team_members"`
}

func (q *Queries) UpdateTeam(ctx context.Context, arg UpdateTeamParams) (Team, error) {
	row := q.db.QueryRow(ctx, updateTeam,
		arg.ID,
		arg.TeamName,
		arg.Currency,
		arg.TeamMembers,
	)
	var i Team
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.TeamName,
		&i.Currency,
		&i.TeamMembers,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
