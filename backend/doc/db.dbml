Project happy_wallet {
  database_type: 'PostgreSQL'
  Note: 'This is the database schema for happy_wallet'
}

Table users as U {
  id bigserial [pk]
  username varchar [not null]
  password varchar [not null]
  email varchar [unique, not null]
  is_email_verified boolean [not null, default: false]
  password_change_at timestamp [not null, default: '0001-01-01']
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

Table verify_emails as VE {
  id bigserial [pk]
  user_id bigint [not null]
  email varchar [not null]
  secret_code varchar [not null]
  is_used bool [not null, default: false]
  created_at timestamp [not null, default: `now()`]
  expired_at timestamp [not null, default: `now() + interval '15 minutes'`]
}

Ref: VE.user_id > U.id

Table teams as T {
  id bigserial [pk]
  owner bigserial [not null]
  team_name varchar [not null]
  currency varchar [not null]  
  team_members jsonb 
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

Ref: T.owner > U.id

Table team_members as TM{
  id bigserial [pk]
  team_id bigint  
  member_name varchar [not null]
  linked_user_id bigint 
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

Ref: TM.team_id > T.id [delete: cascade]
Ref: TM.linked_user_id > U.id

Table expenses as E {
  id bigserial [pk]
  team_id bigint   
  goal varchar [not null]
  amount decimal(10,2) [not null]
  currency varchar [not null]
  sharing_method varchar [not null]
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

Ref: E.team_id > T.id [delete: cascade]

Table expense_details as ED{
  id bigserial [pk]
  expense_id bigint
  member_id bigint
  actual_amount decimal(10,2) [default: 0]
  shared_amount decimal(10,2) [default: 0]
  created_at timestamp [not null, default: `now()`]
  updated_at timestamp [not null, default: `now()`]
}

Ref: ED.member_id > TM.id
Ref: ED.expense_id > E.id [delete: cascade]

Table sessions as S {
  id uuid [pk]
  user_id bigint [not null]
  username varchar [not null]
  refresh_token varchar [not null]
  user_agent varchar [not null]
  client_ip varchar [not null]
  is_blocked boolean [not null, default: false]
  expires_at timestamptz [not null]
  created_at timestamptz [not null, default: `now()`]
}

Ref: S.user_id > U.id